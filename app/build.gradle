apply plugin: 'com.android.application'
apply plugin: 'realm-android'


def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


android {

    def globalConfiguration = rootProject.extensions.getByName("ext")

    signingConfigs {
        rf_release_config {
            storeFile file(BANDITCAT_RELEASE_STORE_FILE)
            storePassword BANDITCAT_RELEASE_STORE_PASSWORD
            keyAlias BANDITCAT_RELEASE_KEY_ALIAS
            keyPassword BANDITCAT_RELEASE_KEY_PASSWORD
        }
    }

    compileSdkVersion globalConfiguration.configuration.compileSdkVersion
    buildToolsVersion globalConfiguration.configuration.buildToolsVersion
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false

    }
    defaultConfig {
        resConfigs "zh"//保留中文
        applicationId globalConfiguration.configuration.applicationId
        minSdkVersion globalConfiguration.configuration.minSdkVersion
        targetSdkVersion globalConfiguration.configuration.targetSdkVersion
        versionCode globalConfiguration.configuration.versionCode
        versionName globalConfiguration.configuration.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }


    buildTypes {
        applicationVariants.all { variant ->

            if (variant.buildType.name.equals('release')) {
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {

                        def apkName = "${outputFile.name.replace("-", "").replace(".apk", "").replace("app", "").replace("release", "")}" +
                                "_(${releaseTime()})_(${defaultConfig.versionName})_${defaultConfig.versionCode}.apk"

                        println "路径=" + outputFile.parentFile.parent
                        variant.assemble.doLast {


                            def outApkFilePath = outputFile.parentFile.parentFile.parent + "/v${defaultConfig.versionName}/${releaseTime()}"

                            def outMappingFilePath = outApkFilePath + "/mapping"

                            copy {

                                from(output.outputFile)
                                into(new File(outApkFilePath))
                                rename {
                                    String fileName ->
                                        apkName
                                }
                            }

                            copy {
                                from(variant.mappingFile)
                                into(new File(outMappingFilePath))
                                rename { String fileName ->
                                    "mapping-${variant.name.replaceAll("Release","_release")}.txt"
                                }
                            }
                        }

                    }

                }
            }

        }

        debug {

            signingConfig signingConfigs.rf_release_config
        }


    }
    packagingOptions {
        exclude '.readme'

        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude "lib/armeabi/librealm-jni.so"
        exclude "lib/arm64-v8a/librealm-jni.so"
        exclude "lib/mips/librealm-jni.so"
        exclude "lib/x86/librealm-jni.so"
        exclude "lib/x86_64/librealm-jni.so"
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
        }
    }


    lintOptions {
        abortOnError false
    }


    flavorDimensions "appFlavors"
    productFlavors {


        sharkman
                {
                    dimension "appFlavors"
                    resValue "string", "app_name", "银鲨截图"//我要截图
                    manifestPlaceholders = [
                            icon: "@mipmap/ic_launcher"
                    ]
                    applicationId globalConfiguration.configuration.applicationId + ".sharkman"
                    buildConfigField 'boolean', 'HAS_WATERMAR', 'false'
                    buildConfigField 'String', 'API_BASE_URL', '"http://122.114.97.223:8083/333333/api/"'
                    minSdkVersion globalConfiguration.configuration.minSdkVersion
                }


    }

}
dependencies {
    def appDependencies = rootProject.ext.appDependencies
    def appTestDependencies = rootProject.ext.appTestDependencies
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation(name: 'ilogie-android-library-release', ext: 'aar')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    annotationProcessor appDependencies.guava
    annotationProcessor appDependencies.daggerCompiler
    annotationProcessor fileTree(dir: 'compile-libs', include: ['*.jar'])
    //系统
    implementation appDependencies.appcompat
    implementation appDependencies.design
    implementation appDependencies.vectorDrawable
    implementation appDependencies.supportv4
    implementation appDependencies.constraint
    implementation appDependencies.rxAndroid2
    implementation appDependencies.rxJava2Adapter
    implementation appDependencies.rxJava2
    implementation appDependencies.dagger
    implementation appDependencies.retrofit
    implementation appDependencies.converterGson
    implementation appDependencies.butterKnife
    implementation appDependencies.annotationProcessor
    implementation appDependencies.materialdatetimepicker
    //第三方
    implementation appDependencies.swipeToLoadLayout
    implementation appDependencies.roundedImageview
    implementation appDependencies.glide
    testImplementation appTestDependencies.junit
    androidTestImplementation appTestDependencies.runner
    androidTestImplementation appTestDependencies.espresso

    compile 'javax.inject:javax.inject:1'
    compile project(':common')
    compile project(':domain')
    compile project(':ui')
}
